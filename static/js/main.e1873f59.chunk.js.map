{"version":3,"sources":["DataParse.js","App.js","serviceWorker.js","index.js"],"names":["editions","require","tcg","input","parsedData","match","forEach","line","matchAll","edition","code","find","productCode","push","name","quantity","foil","InputForm","setParsedData","formState","useFormState","useEffect","format","parse","values","rawInput","field","initialValue","value","onFocus","event","target","select","OutputForm","formApi","useFormApi","setValue","data","map","card","join","buildBasicList","unshift","buildCardKingdom","coindition","language","buildDeckbox","condition","OutputTable","style","width","overflowY","height","display","row","textAlign","paddingLeft","color","App","useState","className","class","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1873f59.chunk.js","sourcesContent":["// https://deckmaster.info/sets.php\r\nconst editions = require('./data/sets.json');\r\n\r\nconst findByCode = (code) =>{\r\n  return editions.find( ({ productCode }) => productCode === code );\r\n}\r\n\r\nexport const parse = (input, format) => {\r\n  if(input){\r\n    if(format === 'tcg'){\r\n      return tcg(input);\r\n    }\r\n  } \r\n};\r\n\r\nexport const buildBasicList = (data) => {\r\n  if(data){\r\n    return data.map( card => {\r\n      return `${card.quantity} ${card.name}`;\r\n    }).join('\\n');\r\n  }\r\n}\r\n\r\nexport const buildCardKingdom = (data) => {\r\n  if(data){\r\n    data = data.map( card => {\r\n      return `\"${card.name}\", ${card.edition.name}, 0, ${card.quantity}`;\r\n    });\r\n    data.unshift('title,edition,foil,quantity')\r\n    return data.join('\\n');\r\n  }\r\n}\r\n\r\nexport const buildDeckbox = (data, coindition = '', language = '', foil = null) => {\r\n  if(data){\r\n    data = data.map( card => {\r\n      return `${card.quantity},\"${card.name}\",${card.edition.name},${coindition},${language},${foil ? 'foil': ''}`;\r\n    });\r\n    data.unshift('Count,Name,Edition,Condition,Language,Foil')\r\n    return data.join('\\n');\r\n  }\r\n}\r\n\r\nconst tcg = (input) => {\r\n  const parsedData = [];\r\n  let array = input.match(/[^\\r\\n]+/g);\r\n\r\n  array.forEach(line => {\r\n    if (line.match(/^\\d/)) {\r\n      let regexp = /(\\d*) (.*) \\[(.*)\\]/;\r\n      let matchAll = line.match(regexp);\r\n      let edition = findByCode(matchAll[3]);\r\n  \r\n      parsedData.push( {\r\n        name: matchAll[2],\r\n        edition,\r\n        quantity: matchAll[1],\r\n        foil: null\r\n      });\r\n    }\r\n  });\r\n  \r\n\r\n  return parsedData;\r\n\r\n\r\n}","import React, { useEffect, useState } from 'react';\nimport { Form, TextArea, useFormState, Select, Option, Checkbox, useFormApi } from 'informed';\nimport './App.css';\nimport { parse, buildBasicList, buildCardKingdom, buildDeckbox } from './DataParse';\n\nfunction App() {\n  const [parsedData, setParsedData] = useState([]);\n  return (\n    <div className='App'>\n      <h1>MTG Data Formatter</h1>\n      <div class='flex-container'>\n        <div>\n          <Form>\n            <InputForm setParsedData={setParsedData} />\n          </Form>\n        </div>\n\n        <div>\n          <Form>\n            <OutputForm parsedData={parsedData} />\n          </Form>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nconst InputForm = ({ setParsedData }) => {\n  const formState = useFormState();\n\n  useEffect(() => {\n    setParsedData(parse(formState.values.rawInput, formState.values.format));\n  }, [formState.values.rawInput, formState.values.format, setParsedData]);\n\n  return (\n    <>\n      <label>\n        Input Format\n        <Select field='format' initialValue='tcg'>\n          <Option value='tcg'>TCG</Option>\n          <Option value='deckbox'>Deckbox</Option>\n        </Select>\n      </label>\n      <TextArea\n        field='rawInput'\n        onFocus={(event) => event.target.select()}\n      />\n    </>\n  )\n}\n\nconst OutputForm = ({ parsedData }) => {\n  const formApi = useFormApi();\n  const formState = useFormState();\n\n  useEffect(() => {\n    if (formState.values.format === 'list') {\n      formApi.setValue('simpleList', buildBasicList(parsedData));\n    }\n    if (formState.values.format === 'cardKingdom') {\n      formApi.setValue('simpleList', buildCardKingdom(parsedData));\n    }\n    if (formState.values.format === 'deckbox') {\n      formApi.setValue('deckboxList', buildDeckbox(parsedData,formState.values.condition,formState.values.language, formState.values.foil));\n    }\n  }, [parsedData, formState.values.format, formApi, formState.values.condition, formState.values.language, formState.values.foil]);\n\n  return (\n    <>\n      <div>\n        <label>\n          Output Format\n          <Select field='format' initialValue='list'>\n            <Option value='list'>Copy List</Option>\n            <Option value='cardKingdom'>Card Kingdom</Option>\n            <Option value='deckbox'>Deckbox</Option>\n            <Option value='editor'>Editor</Option>\n          </Select>\n        </label>\n      </div>\n      \n\n      {(formState.values.format === 'list' || formState.values.format === 'cardKingdom') &&\n        <TextArea\n          field='simpleList'\n          onFocus={(event) => event.target.select()}\n        />\n      }\n\n      {formState.values.format === 'editor' &&\n        <>\n          <OutputTable parsedData={parsedData} />\n        </>\n      }\n\n      {(formState.values.format === 'deckbox') &&\n        <>\n          <label>\n            Condition\n            <Select field='condition' initialValue='Near Mint'>\n              <Option value=''>Leave Blank</Option>\n              <Option value='Mint'>Mint</Option>\n              <Option value='Near Mint'>Near Mint</Option>\n              <Option value='Good'>Good</Option>\n              <Option value='Played'>played</Option>\n              <Option value='Heavily Played'>Heavily Played</Option>\n              <Option value='Poor'>Poor</Option>\n            </Select>\n          </label>\n          <label>\n            Language\n            <Select field='language' initialValue='English'>\n              <Option value=''>Leave Blank</Option>\n              <Option value='English'>English</Option>\n              <Option value='French'>French</Option>\n              <Option value='Italian'>Italian</Option>\n              <Option value='Spanish'>Spanish</Option>\n              <Option value='Portuguese'>Portuguese</Option>\n              <Option value='Japanese'>Japanese</Option>\n              <Option value='Chinese'>Chinese</Option>\n              <Option value='Russian'>Russian</Option>\n              <Option value='Korean'>Korean</Option>\n              <Option value='Traditional Chinese'>Traditional Chinese</Option>\n            </Select>\n          </label>\n          <label>\n            Foil <Checkbox field='foil'/>\n          </label>\n\n          <TextArea\n            field='deckboxList'\n            onFocus={(event) => event.target.select()}\n          />\n        </>\n      }\n\n    </>\n  )\n}\n\nconst OutputTable = ({ parsedData }) => {\n  const table = () => {\n    return parsedData.map(row => {\n      return (\n        <tr style={{ textAlign: 'left' }}>\n          <td style={{ paddingLeft: '15px' }}>{row.quantity}</td>\n          <td style={{ paddingLeft: '15px' }}>{row.name}</td>\n          {row.edition ? <td style={{ paddingLeft: '15px' }}>{row.edition.name}</td> : <td style={{ paddingLeft: '15px', color: 'red' }}>MISSING</td>}\n        </tr>\n      );\n    });\n  };\n\n  return (\n    parsedData ?\n      <table style={{ width: '100%', overflowY: 'scroll', height: '500px', display: 'block' }}>\n        <thead>\n          <tr>\n            <th>Quantity</th>\n            <th>Name</th>\n            <th>Edition</th>\n          </tr>\n        </thead>\n        <tbody>\n          {table()}\n        </tbody>\n      </table>\n      : <></>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}