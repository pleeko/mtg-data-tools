{"version":3,"sources":["DataParse.js","data/placeholder.js","App.js","serviceWorker.js","index.js"],"names":["editions","require","findByCode","code","find","productCode","inputPlaceholders","tcg","basicList","deckBox","InputForm","setParsedData","formState","useFormState","useEffect","values","format","input","set","parsedData","match","forEach","line","count","name","split","filter","e","trim","length","map","slice","matches","join","push","edition","quantity","foil","basicListInput","rawInput","matchAll","tcgInput","field","initialValue","value","sort","a","b","key","placeholder","onFocus","event","target","select","OutputForm","formApi","useFormApi","setValue","data","card","buildBasicList","unshift","buildCardKingdom","buildTcg","coindition","language","buildDeckbox","condition","OutputTable","style","width","overflowY","height","display","row","textAlign","paddingLeft","color","App","useState","className","marginTop","padding","marginRight","href","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e83fa078.chunk.js","sourcesContent":["// https://deckmaster.info/sets.php\r\nconst editions = require('./data/sets.json');\r\n\r\nconst findByCode = (code) => {\r\n  return editions.find(({ productCode }) => productCode === code);\r\n}\r\n\r\nexport const buildBasicList = (data) => {\r\n  if (data) {\r\n    return data.map(card => {\r\n      return `${card.quantity} ${card.name}`;\r\n    }).join('\\n');\r\n  }\r\n}\r\n\r\nexport const buildTcg = (data) => {\r\n  if (data) {\r\n    return data.map(card => {\r\n      return `${card.quantity} ${card.name} [${card.edition ? card.edition.productCode : ''}]`;\r\n    }).join('\\n');\r\n  }\r\n}\r\n\r\nexport const buildCardKingdom = (data) => {\r\n  if (data) {\r\n    data = data.map(card => {\r\n      return `\"${card.name}\", ${card.edition ? card.edition.name : ''}, 0, ${card.quantity}`;\r\n    });\r\n    data.unshift('title,edition,foil,quantity')\r\n    return data.join('\\n');\r\n  }\r\n}\r\n\r\nexport const buildDeckbox = (data, coindition = '', language = '', foil = null) => {\r\n  if (data) {\r\n    data = data.map(card => {\r\n      return `${card.quantity},\"${card.name}\",${card.edition ? card.edition.name : ''},${coindition},${language},${foil ? 'foil' : ''}`;\r\n    });\r\n    data.unshift('Count,Name,Edition,Condition,Language,Foil')\r\n    return data.join('\\n');\r\n  }\r\n}\r\n\r\nexport const tcgInput = (input) => {\r\n  if (input) {\r\n    const parsedData = [];\r\n    let array = input.match(/[^\\r\\n]+/g);\r\n\r\n    array.forEach(line => {\r\n      if (line.match(/(\\d*) (.*) \\[(.*)\\]/)) {\r\n        let regexp = /(\\d*) (.*) \\[(.*)\\]/;\r\n        let matchAll = line.match(regexp);\r\n        let edition = findByCode(matchAll[3]);\r\n        parsedData.push({\r\n          name: matchAll[2],\r\n          edition,\r\n          quantity: matchAll[1],\r\n          foil: null\r\n        });\r\n      }\r\n    });\r\n\r\n    return parsedData;\r\n  }\r\n}\r\n\r\n\r\nexport const basicListInput = (input, set) => {\r\n  if (input) {\r\n    const parsedData = [];\r\n    let array = input.match(/[^\\r\\n]+/g);\r\n    array.forEach(line => {\r\n\r\n      let count = '';\r\n      let name = line.split(/(\\s+)/).filter((e) => { return e.trim().length > 0; }).map(slice => {\r\n        var matches = slice.match(/(\\d+)/);\r\n        if (matches) {\r\n          count = matches[0]\r\n          return '';\r\n        }\r\n        return slice;\r\n      }).join(' ').trim();\r\n\r\n      parsedData.push({\r\n        name,\r\n        edition: findByCode(set),\r\n        quantity: count,\r\n        foil: null\r\n      })\r\n\r\n    });\r\n\r\n\r\n    return parsedData;\r\n  }\r\n\r\n}","const tcgPlayerPlaceholder = `TOTAL: 9 cards - $8.53\r\n1 Fissure [DRK]\r\n1 Durkwood Boars [LEG]\r\n1 Barbary Apes [LEG]\r\n1 Alabaster Potion [LEG]\r\n1 Syphon Soul [LEG]\r\n1 The Brute [LEG]\r\n1 Vampire Bats [LEG]\r\n1 Flash Flood [CHR]\r\n1 Wall of Earth [LEG]`;\r\n\r\nconst basicListPlaceholder = \r\n`Mountain (A) 27\r\nMountain (B) 29\r\nMountain (C) 29\r\nSimulacrum x2\r\n12X Evil Presence \r\nSengir Vampire x1\r\nBog Wraith x1`;\r\n\r\nconst deckBoxPlaceholder = `TODO: STILL NEED TO IMPLEMENT`;\r\n\r\nexport const inputPlaceholders ={\r\n  tcg: tcgPlayerPlaceholder,\r\n  basicList: basicListPlaceholder,\r\n  deckBox: deckBoxPlaceholder\r\n}\r\n\r\n\r\n\r\n\r\nexport const description = `This tool was created to make the process of magic card inventory management easier. I Found the process of adding cards scanned in from the TCG Player app to my Deckbox account to be quite tedious.\r\n`;\r\n\r\nexport const howTo = `Simply paste in your card list data and select the appropriate output format. If you have any suggestions or wish to have more output or input formats supported please open an issue on the github project.`;","import React, { useEffect, useState } from 'react';\nimport { Form, TextArea, useFormState, Select, Option, Checkbox, useFormApi } from 'informed';\nimport './App.css';\nimport { tcgInput,basicListInput, buildBasicList, buildCardKingdom, buildDeckbox, buildTcg } from './DataParse';\nimport { inputPlaceholders, description, howTo } from './data/placeholder';\nconst editions = require('./data/sets.json');\n\n\nfunction App() {\n  const [parsedData, setParsedData] = useState([]);\n  return (\n    <div className='App'>\n      <header>\n        <h1 style={{marginTop: '.5rem'}}>MTG Data Formatter</h1>\n      </header>\n\n      <div className='flex-container'>\n        <div>\n          <Form>\n            <InputForm setParsedData={setParsedData} />\n          </Form>\n        </div>\n\n        <div>\n          <Form>\n            <OutputForm parsedData={parsedData} />\n          </Form>\n        </div>        \n      </div>\n\n      <div className='info'>\n        <p>{description}</p>\n        <p>{howTo}</p>\n      </div>\n\n      <footer>\n        <div style={{textAlign: 'left', padding: '.5rem 0 .5rem .5rem'}}>\n          <a style={{marginRight: '1rem'}}href='https://github.com/pleeko/mtg-data-tools/issues'>Suggestions/Bugs</a>\n          <a href='https://github.com/pleeko/mtg-data-tools'>Source Code</a>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nconst InputForm = ({ setParsedData }) => {\n  const formState = useFormState();\n\n  useEffect(() => {\n    if(formState.values.format === 'basicList'){\n      setParsedData(basicListInput(formState.values.rawInput, formState.values.set));\n    }else{\n      setParsedData(tcgInput(formState.values.rawInput));\n    }\n  }, [formState.values.rawInput, formState.values.format, setParsedData, formState.values.set]);\n\n  return (\n    <>\n      <label>\n        Input Format\n        <Select field='format' initialValue='basicList'>\n          <Option value='tcg'>TCG</Option>\n          <Option value='deckBox'>Deckbox</Option>\n          <Option value='basicList'>Basic List</Option>\n        </Select>\n      </label>\n      \n      {(formState.values.format === 'basicList') &&\n        <div>\n          <label>\n            Set\n            <Select field='set' initialValue=''>\n              <Option value=''>None</Option>\n              {editions.sort((a,b)=>{\n                if (a.name < b.name) {\n                  return -1;\n                }\n                if (a.name > b.name) {\n                  return 1;\n                }\n                return 0;\n              }).map((edition) => {\n                return <Option key={edition.name} value={edition.productCode}>{edition.name}</Option>\n              })}\n            </Select>\n          </label>\n        </div>\n      }\n      <TextArea\n        placeholder={inputPlaceholders[formState.values.format]}\n        field='rawInput'\n        onFocus={(event) => event.target.select()}\n      />\n    </>\n  )\n}\n\nconst OutputForm = ({ parsedData }) => {\n  const formApi = useFormApi();\n  const formState = useFormState();\n\n  useEffect(() => {\n    if (formState.values.format === 'list') {\n      formApi.setValue('simpleList', buildBasicList(parsedData));\n    }\n    if (formState.values.format === 'cardKingdom') {\n      formApi.setValue('simpleList', buildCardKingdom(parsedData));\n    }\n    if (formState.values.format === 'tcg') {\n      formApi.setValue('simpleList', buildTcg(parsedData));\n    }\n    if (formState.values.format === 'deckbox') {\n      formApi.setValue('deckboxList', buildDeckbox(parsedData, formState.values.condition, formState.values.language, formState.values.foil));\n    }\n  }, [parsedData, formState.values.format, formApi, formState.values.condition, formState.values.language, formState.values.foil]);\n\n  return (\n    <>\n      <div>\n        <label>\n          Output Format\n          <Select field='format' initialValue='list'>\n            <Option value='list'>Copy List</Option>\n            <Option value='tcg'>TCG</Option>\n            <Option value='cardKingdom'>Card Kingdom</Option>\n            <Option value='deckbox'>Deckbox</Option>\n            <Option value='editor'>Editor</Option>\n          </Select>\n        </label>\n      </div>\n\n\n      {(formState.values.format === 'list' || formState.values.format === 'tcg' || formState.values.format === 'cardKingdom') &&\n        <TextArea\n          field='simpleList'\n          onFocus={(event) => event.target.select()}\n        />\n      }\n\n      {formState.values.format === 'editor' &&\n        <>\n          <OutputTable parsedData={parsedData} />\n        </>\n      }\n\n      {(formState.values.format === 'deckbox') &&\n        <>\n          <label>\n            Condition\n            <Select field='condition' initialValue='Near Mint'>\n              <Option value=''>Leave Blank</Option>\n              <Option value='Mint'>Mint</Option>\n              <Option value='Near Mint'>Near Mint</Option>\n              <Option value='Good'>Good</Option>\n              <Option value='Played'>played</Option>\n              <Option value='Heavily Played'>Heavily Played</Option>\n              <Option value='Poor'>Poor</Option>\n            </Select>\n          </label>\n          <label>\n            Language\n            <Select field='language' initialValue='English'>\n              <Option value=''>Leave Blank</Option>\n              <Option value='English'>English</Option>\n              <Option value='French'>French</Option>\n              <Option value='Italian'>Italian</Option>\n              <Option value='Spanish'>Spanish</Option>\n              <Option value='Portuguese'>Portuguese</Option>\n              <Option value='Japanese'>Japanese</Option>\n              <Option value='Chinese'>Chinese</Option>\n              <Option value='Russian'>Russian</Option>\n              <Option value='Korean'>Korean</Option>\n              <Option value='Traditional Chinese'>Traditional Chinese</Option>\n            </Select>\n          </label>\n          <label>\n            Foil <Checkbox field='foil' />\n          </label>\n\n          <TextArea\n            field='deckboxList'\n            onFocus={(event) => event.target.select()}\n          />\n        </>\n      }\n\n    </>\n  )\n}\n\nconst OutputTable = ({ parsedData }) => {\n  const table = () => {\n    return parsedData.map(row => {\n      return (\n        <tr style={{ textAlign: 'left' }}>\n          <td style={{ paddingLeft: '15px' }}>{row.quantity}</td>\n          <td style={{ paddingLeft: '15px' }}>{row.name}</td>\n          {row.edition ? <td style={{ paddingLeft: '15px' }}>{row.edition.name}</td> : <td style={{ paddingLeft: '15px', color: 'red' }}>MISSING</td>}\n        </tr>\n      );\n    });\n  };\n\n  return (\n    parsedData ?\n      <table style={{ width: '100%', overflowY: 'scroll', height: '500px', display: 'block' }}>\n        <thead>\n          <tr>\n            <th>Quantity</th>\n            <th>Name</th>\n            <th>Edition</th>\n          </tr>\n        </thead>\n        <tbody>\n          {table()}\n        </tbody>\n      </table>\n      : <></>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}